#!/bin/bash

echo '------------------------------------------'
echo '-------- Starting Database Import --------'
echo '-- Make sure your file is called db.sql --'
echo '------------------------------------------'

CONTAINER_DB=$(docker ps --format '{{.Names}}' | grep -i "db")
CONTAINER_WEB=$(docker ps --format '{{.Names}}' | grep -i "apache")

function showSpinner(){
  spin='-\|/'
  while kill -0 $1 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\r${spin:$i:1}"
    sleep .1
  done
}

function updateMagentoEnvAndCompile(){
  docker exec -i --user www-data "$CONTAINER_WEB" sed -i "/'dbname' => '*/c\'dbname' => '$DB_NAME'," /var/www/html/app/etc/env.php

  echo '---------- Running Setup Upgrade ---------'
  docker exec -i --user www-data "$CONTAINER_WEB" bin/magento setup:upgrade > /dev/null &
  pidsu=$!
  showSpinner "$pidsu"

  echo '----------- Running DI Compile -----------'
  docker exec -i --user www-data "$CONTAINER_WEB" bin/magento setup:di:compile 2>/dev/null &
  piddi=$!
  showSpinner "$piddi"

  echo '------ Running Static Content Deploy -----'
  docker exec -i --user www-data "$CONTAINER_WEB" bin/magento setup:static-content:deploy -f > /dev/null &
  pidscd=$!
  showSpinner "$pidscd"

  #Disable TwoFactor Authentication
  echo '----------- Disabling ADMIN 2FA ----------'
  docker exec -i "$CONTAINER_DB" mysql -uroot -proot $DB_NAME -e "UPDATE core_config_data SET value = 0 WHERE path in ('msp_securitysuite_twofactorauth/google/enabled')";

  echo '------- Disabling CUSTOM ADMIN URL -------'
  docker exec -i "$CONTAINER_DB" mysql -uroot -proot $DB_NAME -e "UPDATE core_config_data SET value = 0 WHERE path in ('admin/url/use_custom')";

  echo "------ Creating Default Admin User -------"
  docker exec -i --user www-data "$CONTAINER_WEB" bin/magento admin:user:create --admin-user=expertime@expertime.com --admin-password=Test1234 --admin-email=expertime@expertime.com --admin-firstname=LocalAdmin --admin-lastname=User > /dev/null

  echo -e "\n"
  echo "username: expertime@expertime.com"
  echo "password: Test1234"
  echo -e "\n"

  read -p "Would you like to Update Web URL's in New DB? (y or n): " -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    function getURLFromDB(){
      DB_RESULT=$(docker exec -i "$CONTAINER_DB" mysql -uroot -proot $DB_NAME -e "select distinct(value) from core_config_data where path like 'web/%secure%' and value is not null")
      URL_ARR=( $( for i in $DB_RESULT ; do echo $i ; done ) )
      COUNT=${#URL_ARR[@]}
      for ((i=1;i<COUNT;i++))
          do echo "${i}: ${URL_ARR[$i]}"
        done
        echo "q: Quit"
    }

    $(clear >&2)
    while true
    do
        getURLFromDB
        read -p 'Select the URL you would like to update? ' URL_INDEX

        if [[ $URL_INDEX == "q" ]]; then
          break
        fi

        if [ "${URL_ARR[URL_INDEX]+abc}" ]; then
          echo 'Enter "q" to go back to Main Menu';
          read -p "Please Enter the Url to replace ${URL_ARR[URL_INDEX]}: " SITE_URL
          if [[ $SITE_URL != "q" ]]; then
            docker exec -i "$CONTAINER_DB" mysql -uroot -proot $DB_NAME -e "UPDATE core_config_data SET value = CONCAT('${SITE_URL}','/') WHERE value = '${URL_ARR[URL_INDEX]}'"
            echo "--------------- Url Updated --------------"
          fi
        else
          echo "Invalid Input!"
        fi
    done
  fi

    echo '-------------- Clearing Cache ------------'
    docker exec -i --user www-data "$CONTAINER_WEB" bin/magento cache:flush

    echo '----------- Reindexing Magento -----------'
    docker exec -i --user www-data "$CONTAINER_WEB" bin/magento cache:flush

    echo "----- Magento is now using: ${DB_NAME}"
}

# DATABASE IMPORT
read -p 'Enter the New Database Name (A-Z|0-9|_): ' DB_NAME
echo "-> Starting Import for database: $DB_NAME into container: $CONTAINER_DB"
docker exec -i "$CONTAINER_DB" mysql -uroot -proot -e "create database $DB_NAME"
docker exec -i "$CONTAINER_DB" mysql -uroot -proot $DB_NAME < db.sql &
piddbimport=$!
showSpinner "$piddbimport"
echo "----------- Database Imported! -----------"

read -p "Update Magento to use the new Database? (y or n): " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
  updateMagentoEnvAndCompile $CONTAINER_DB
else
  echo "Skipping Magento DB Replace"
fi

echo "------------------ DONE ------------------"